<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Character</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlsEnabled = true;

// state of the player's position/physics
vspeed = 0;
grounded = false;
jumping = false;
climbing = false;
touchingLadder = false;
movingUpLadder = false;
ladderBelow = false;
magnetized = false;

currentDir = DIR.NORTH;

// wall transitions
degreesToRotateInner = 0;
degreesToRotateOuter = 0;
deltaDegrees = 2;
demagedFrames = 0;

// abilities
hasMagnetBoots = true;
jumpPower = 4;

// transitions
door_id = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// === COLLISION ===
if(controlsEnabled) {    
    // Check if colliding with a ladder
    ladderBlock = checkCollisionDir(currentDir, WAY.SELF, obj_Ladder);
    if (ladderBlock != noone) {
        touchingLadder = true;
    } else {
        touchingLadder = false;
        movingUpLadder = false;
        climbing = false;
    }
    
    // "Floor" block collisions
    stdCollision(self, WAY.LEFT, obj_Floor);
    stdCollision(self, WAY.RIGHT, obj_Floor);
    stdCollision(self, WAY.ABOVE, obj_Floor);
    
    // Magnet block collisions
    if(!magnetized) {
        stdCollision(self, WAY.LEFT, obj_Magnet);
        stdCollision(self, WAY.RIGHT, obj_Magnet);
        stdCollision(self, WAY.ABOVE, obj_Magnet);  
    }
    
    // If we are not moving upward, check the bottom for a block
    if (vspeed &gt;= 0) {
        // determine which blocks we are colliding with
        floorBlock = checkCollisionDir(currentDir, WAY.BELOW, obj_Floor);
        magFloorBlock = checkCollisionDir(currentDir, WAY.BELOW, obj_Magnet);
        ladderBlockBelow = checkCollisionDir(currentDir, WAY.BELOW, obj_Ladder);
        restOfBody = collision_rectangle(bbox_left + 1, bbox_bottom - 2, bbox_right - 1, bbox_top, obj_Ladder, false, true);
        if((floorBlock || magFloorBlock) &amp;&amp; !movingUpLadder &amp;&amp; currentDir == DIR.NORTH) {
            if(floorBlock != noone) {
                // Move onto the floor and stop gravity
                vspeed = 0;
                y = floorBlock.y - (sprite_height / 2);
                grounded = true;
                climbing = false;
                hspeed = 0;
            }
            if(magFloorBlock != noone) {
                // Move onto the magnet block below and stop gravity
                vspeed = 0;
                y = magFloorBlock.y - (sprite_height / 2);
                grounded = true;
                climbing = false;
                hspeed = 0;
            }
        } else if (ladderBlockBelow != noone &amp;&amp; restOfBody == noone &amp;&amp; !climbing) {
            // stand on the top of ladders
            vspeed = 0;
            y = ladderBlockBelow.y - (sprite_height / 2);
            grounded = true;
        } else {
            grounded = false;
        }
        
        if (ladderBlockBelow != noone &amp;&amp; restOfBody == noone) {
            ladderBelow = true;
        } else {
            ladderBelow = false;
        }
    }
    
    // Gravity
    if (!grounded &amp;&amp; !climbing &amp;&amp; !magnetized) {
        vspeed += global.gravFactor;
        if (vspeed &gt; global.maxFallSpeed) {
            vspeed = global.maxFallSpeed;
        }
    } else {
        vspeed = 0;
    }
    
    // determine if the player is on a magnet block
    magnetBlock = checkCollisionDir(currentDir, WAY.BELOW, obj_Magnet);
    magnetized = magnetBlock != noone;
    
    // count how many frames have passed since the player was magnetized
    if(magnetized) {
        demagedFrames = 0;
    } else {
        demagedFrames++;
    }
    
    // instant flip to NORTH when falling off ceilings, etc.
    if(!magnetized &amp;&amp; currentDir != DIR.NORTH &amp;&amp; demagedFrames &gt; 2) {
        image_angle = 0;
        view_angle = 0;
        currentDir = DIR.NORTH;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Handle transitioning on inner right angles (eg. floor to wall, wall to ceiling)
if(degreesToRotateInner != 0) {
    if(degreesToRotateInner &gt; 0) {
        // rotate CCW
        image_angle += deltaDegrees;
        view_angle -= deltaDegrees;
        degreesToRotateInner -= deltaDegrees;
        // move the player slightly each frame to prevent them from ending
        // up in a magnet block after the rotation is complete
        switch(currentDir) {
        case DIR.NORTH:
            x -= 16/45;
            y += 16/45;
            break;
        case DIR.WEST:
            x += 16/45;
            y += 16/45;
            break;
        case DIR.SOUTH:
            x += 16/45;
            y -= 16/45;
            break;
        case DIR.EAST:
            x -= 16/45;
            y -= 16/45;
            break;
        }
    } else {
        // rotate CW
        image_angle -= deltaDegrees;
        view_angle += deltaDegrees;
        degreesToRotateInner += deltaDegrees;
        switch(currentDir) {
        case DIR.NORTH:
            x += 16/45;
            y += 16/45;
            break;
        case DIR.WEST:
            x += 16/45;
            y -= 16/45;
            break;
        case DIR.SOUTH:
            x -= 16/45;
            y -= 16/45;
            break;
        case DIR.EAST:
            x -= 16/45;
            y += 16/45;
            break;
        }
    }
} else if(degreesToRotateOuter != 0) {
    // do outer corner transition
    if(degreesToRotateOuter &gt; 0) {
        // rotate CCW
        image_angle += deltaDegrees;
        view_angle -= deltaDegrees;
        degreesToRotateOuter -= deltaDegrees;
        // move the player slightly each frame to prevent them from ending
        // up in a magnet block after the rotation is complete
        switch(currentDir) {
        case DIR.NORTH:
            x -= 16/45;
            y += 48/45;
            break;
        case DIR.WEST:
            x += 48/45;
            y += 16/45;
            break;
        case DIR.SOUTH:
            x += 16/45;
            y -= 48/45;
            break;
        case DIR.EAST:
            x -= 48/45;
            y -= 16/45;
            break;
        }
    } else {
        // rotate CW
        image_angle -= deltaDegrees;
        view_angle += deltaDegrees;
        degreesToRotateOuter += deltaDegrees;
        switch(currentDir) {
        case DIR.NORTH:
            x += 16/45;
            y += 48/45;
            break;
        case DIR.WEST:
            x += 48/45;
            y -= 16/45;
            break;
        case DIR.SOUTH:
            x -= 16/45;
            y -= 48/45;
            break;
        case DIR.EAST:
            x -= 48/45;
            y += 16/45;
            break;
        }
    }
} else if(!controlsEnabled) {
    // the rotation has completed
    controlsEnabled = true;
    magnetized = true;
    
    // image angle should be from 0-359
    while(image_angle &lt; 0) {
        image_angle += 360;
    }
    while(image_angle &gt;= 360) {
        image_angle -= 360;
    }
    // set the new direction based on the image rotation
    switch(image_angle) {
    case 0:
        currentDir = DIR.NORTH;
        break;
    case 90:
        currentDir = DIR.WEST;
        break;
    case 180:
        currentDir = DIR.SOUTH;
        break;
    case 270:
        currentDir = DIR.EAST;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    // Check if colliding with a ladder
    if (touchingLadder) {
        climbing = true;
        y -= 2;
        vspeed = 0;
        x = ladderBlock.x + (sprite_width / 2);
        movingUpLadder = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    // Check if colliding with a ladder
    if (touchingLadder || ladderBelow) {
        climbing = true;
        y += 2;
        vspeed = 0;
        if (touchingLadder) {
            x = ladderBlock.x + (sprite_width / 2);
        } else if (ladderBelow) {
            x = ladderBlockBelow.x + (sprite_width / 2);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    // stop off-wall jump momentum if the player wants to control themselves
    hspeed = 0;
    
    // inner corner
    magnet = checkCollisionDir(currentDir, WAY.RIGHT, obj_Magnet);
    magFloor = checkCollisionDir(currentDir, WAY.BELOW, obj_Magnet);
    
    // outer corner
    floorFloor = checkCollisionDir(currentDir, WAY.BELOW, obj_Floor);
    magPrev = checkCollisionDir(currentDir, WAY.BELOW, obj_Magnet, -2, 0);
    magLeft = checkCollisionDir(currentDir, WAY.LEFT, obj_Magnet);
    
    if(magnet &amp;&amp; magFloor &amp;&amp; magnet != magFloor) {
        // transition onto the magnet block wall on the right
        // position the player right next to the block to transition to
        switch(currentDir) {
        case DIR.NORTH:
            x = magnet.x - sprite_width / 2;
            break;
        case DIR.SOUTH:
            x = magnet.x + 3 * sprite_width / 2;
            break;
        case DIR.EAST:
            y = magnet.y - sprite_width / 2;
            break;
        case DIR.WEST:
            y = magnet.y + 3 * sprite_width / 2;
            break;
        }
        // rotate the player
        controlsEnabled = false;
        degreesToRotateInner += 90;
    } else if(magFloor == noone &amp;&amp; floorFloor == noone &amp;&amp; magLeft == noone &amp;&amp; magPrev != noone) {
        // transition onto the right side of the magnet block just walked over
        // position next to the magnet wall
        switch(currentDir) {
        case DIR.NORTH:
            x = magPrev.x + 3 * sprite_width / 2;
            break;
        case DIR.SOUTH:
            x = magPrev.x - sprite_width / 2;
            break;
        case DIR.EAST:
            y = magPrev.y + 3 * sprite_width / 2;
            break;
        case DIR.WEST:
            y = magPrev.y - sprite_width / 2;
            break;
        }
        controlsEnabled = false;
        degreesToRotateOuter -= 90;
    } else {
        // regular movement
        switch(currentDir) {
        case DIR.NORTH:
            x += 4;
            break;
        case DIR.SOUTH:
            x -= 4;
            break;
        case DIR.EAST:
            y += 4;
            break;
        case DIR.WEST:
            y -= 4;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    // stop off-wall jump momentum if the player wants to control themselves
    hspeed = 0;
    
    // inner corner
    magnet = checkCollisionDir(currentDir, WAY.LEFT, obj_Magnet);
    magFloor = checkCollisionDir(currentDir, WAY.BELOW, obj_Magnet);
    
    // outer corner
    floorFloor = checkCollisionDir(currentDir, WAY.BELOW, obj_Floor);
    magPrev = checkCollisionDir(currentDir, WAY.BELOW, obj_Magnet, 2, 0);
    magLeft = checkCollisionDir(currentDir, WAY.RIGHT, obj_Magnet);
    
    if(magnet &amp;&amp; magFloor &amp;&amp; magnet != magFloor) {
        // transition onto the magnet block wall on the right
        // position the player right next to the block to transition to
        switch(currentDir) {
        case DIR.NORTH:
            x = magnet.x + 3 * sprite_width / 2;
            break;
        case DIR.SOUTH:
            x = magnet.x - sprite_width / 2;
            break;
        case DIR.EAST:
            y = magnet.y + 3 * sprite_width / 2;
            break;
        case DIR.WEST:
            y = magnet.y - sprite_width / 2;
            break;
        }
        // rotate the player
        controlsEnabled = false;
        degreesToRotateInner -= 90;
    } else if(magFloor == noone &amp;&amp; floorFloor == noone &amp;&amp; magLeft == noone &amp;&amp; magPrev != noone) {
        // transition onto the right side of the magnet block just walked over
        // pre-position
        switch(currentDir) {
        case DIR.NORTH:
            x = magPrev.x - sprite_width / 2;
            break;
        case DIR.SOUTH:
            x = magPrev.x + 3 * sprite_width / 2;
            break;
        case DIR.EAST:
            y = magPrev.y - sprite_width / 2;
            break;
        case DIR.WEST:
            y = magPrev.y + 3 * sprite_width / 2;
            break;
        }
        controlsEnabled = false;
        degreesToRotateOuter += 90;
    } else {
        // normal movement
        switch(currentDir) {
        case DIR.NORTH:
            x -= 4;
            break;
        case DIR.SOUTH:
            x += 4;
            break;
        case DIR.EAST:
            y -= 4;
            break;
        case DIR.WEST:
            y += 4;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    if(magnetized) {
        switch(currentDir) {
            case DIR.NORTH:
                vspeed -= jumpPower;
                magnetized = false;
                break;
            case DIR.EAST:
                hspeed += jumpPower / 2;
                break;
            case DIR.SOUTH:
                vspeed += jumpPower / 2;
                break;
            case DIR.WEST:
                hspeed -= jumpPower / 2;
                break;    
        }
        grounded = false;
        jumping = true;  
    } else if (grounded &amp;&amp; !climbing &amp;&amp; !magnetized) {
        vspeed -= jumpPower;
        grounded = false;
        jumping = true;
    }
    

    
    if (climbing) {
        climbing = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (door_id != "") {
    x = (door_id).x + (sprite_width / 2);
    y = (door_id).y + (sprite_height / 2);
}

door_id = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>32768</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>514</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_text</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>Magnetized? :</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>magnetized</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>120</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>514</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_text</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>x: </string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>20</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>x</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>20</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>20</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>514</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_text</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>y: </string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>35</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>y</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>20</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>35</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// debug slowdown toggle
if(room_speed == 60) {
    room_speed = 5;
} else {
    room_speed = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    movingUpLadder = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
