<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Stand_Right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// states
itemGet = noone;
controlsEnabled = true;
dying = false;
level = 0; //starting level

// state of the player's position/physics
vspeed = 0;
grounded = false;
jumping = false;
climbing = false;
touchingLadder = false;
movingUpLadder = false;
ladderBelow = false;
magnetized = false;
facing = WAY.RIGHT;
airFrames = 0;
global.dialogueOpen = false;

currentDir = DIR.NORTH;

// wall transitions
degreesToRotateInner = 0;
degreesToRotateOuter = 0;
deltaDegrees = 2;
demagedFrames = 0;

// abilities
hasMagnetBoots = false;
jumpPower = 4;
moveSpeed = 3;

// transitions
door_id = 0;

// animation
run_frame_rate = 0.08;
climb_frame_rate = 0.1;
image_speed = run_frame_rate;

// Looking around
camera_detached = false;

// Background parallax offset
bg_offsetX = background_x[0];
bg_offsetY = background_y[0];
yPercentage = 0;

//audio
audio_listener_orientation(0,1,0,0,0,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlsEnabled = true;

if(hasMagnetBoots) {
    sprite_index = spr_Stand_Right_Mag;
} else {
    sprite_index = spr_Stand_Right;
}
with(itemGet)
{
    instance_destroy();
}
itemGet = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// === COLLISION ===
if(controlsEnabled) {    
    // Check if colliding with a ladder
    ladderBlock = checkCollisionDir(currentDir, WAY.SELF, obj_Ladder);
    if (ladderBlock != noone) {
        touchingLadder = true;
    } else {
        touchingLadder = false;
        movingUpLadder = false;
        climbing = false;
    }
    
    // "Floor" block collisions
    stdCollision(self, WAY.LEFT, obj_Floor);
    stdCollision(self, WAY.RIGHT, obj_Floor);
    stdCollision(self, WAY.ABOVE, obj_Floor);
    
    // Side doors collisions
    stdCollisionDoor(self, WAY.LEFT, obj_SideDoor);
    stdCollisionDoor(self, WAY.RIGHT, obj_SideDoor);
        
    
    // Magnet block collisions
    if(!magnetized) {
        stdCollision(self, WAY.LEFT, obj_Magnet);
        stdCollision(self, WAY.RIGHT, obj_Magnet);
        stdCollision(self, WAY.ABOVE, obj_Magnet);  
    }
    
    // If we are not moving upward, check the bottom for a block
    if (vspeed &gt;= 0) {
        // determine which blocks we are colliding with
        floorBlock = checkCollisionDir(currentDir, WAY.BELOW, obj_Floor);
        magFloorBlock = checkCollisionDir(currentDir, WAY.BELOW, obj_Magnet);
        ladderBlockBelow = checkCollisionDir(currentDir, WAY.BELOW, obj_Ladder);
        restOfBody = collision_rectangle(bbox_left + 1, bbox_bottom - 2, bbox_right - 1, bbox_top, obj_Ladder, false, true);
        
        if((floorBlock || magFloorBlock) &amp;&amp; !movingUpLadder &amp;&amp; currentDir == DIR.NORTH) {
            if(floorBlock != noone) {
                // Move onto the floor and stop gravity
                vspeed = 0;
                y = floorBlock.y - (sprite_height / 2);
                grounded = true;
                climbing = false;
                hspeed = 0;
                
                // change the arial sprite to a standing one
                if(sprite_index == spr_Fall_Right ||
                   sprite_index == spr_Jump_Right ||
                   sprite_index == spr_Fall_Right_Mag ||
                   sprite_index == spr_Jump_Right_Mag) {
                    if(!hasMagnetBoots) {
                        sprite_index = spr_Stand_Right;
                    } else {
                        sprite_index = spr_Stand_Right_Mag;
                    }
                } else if(sprite_index == spr_Fall_Left ||
                          sprite_index == spr_Jump_Left ||
                          sprite_index == spr_Fall_Left_Mag ||
                          sprite_index == spr_Jump_Left_Mag) {
                    if(!hasMagnetBoots) {
                        sprite_index = spr_Stand_Left;
                    } else {
                        sprite_index = spr_Stand_Left_Mag;
                    }
                } 
            }
            if(magFloorBlock != noone) {
                // Move onto the magnet block below and stop gravity
                vspeed = 0;
                y = magFloorBlock.y - (sprite_height / 2);
                grounded = true;
                climbing = false;
                hspeed = 0;
                // change the arial sprite to a standing one
                if(sprite_index == spr_Fall_Right ||
                   sprite_index == spr_Jump_Right ||
                   sprite_index == spr_Fall_Right_Mag ||
                   sprite_index == spr_Jump_Right_Mag) {
                    if(!hasMagnetBoots) {
                        sprite_index = spr_Stand_Right;
                    } else {
                        sprite_index = spr_Stand_Right_Mag;
                    }
                } else if(sprite_index == spr_Fall_Left ||
                          sprite_index == spr_Jump_Left ||
                          sprite_index == spr_Fall_Left_Mag ||
                          sprite_index == spr_Jump_Left_Mag) {
                    if(!hasMagnetBoots) {
                        sprite_index = spr_Stand_Left;
                    } else {
                        sprite_index = spr_Stand_Left_Mag;
                    }
                }
            }
        } else if (ladderBlockBelow != noone &amp;&amp; restOfBody == noone &amp;&amp; !climbing) {
            // stand on the top of ladders
            vspeed = 0;
            y = ladderBlockBelow.y - (sprite_height / 2);
            grounded = true;
            // change the arial sprite to a standing one
            if(sprite_index == spr_Fall_Right ||
               sprite_index == spr_Jump_Right ||
               sprite_index == spr_Fall_Right_Mag ||
               sprite_index == spr_Jump_Right_Mag) {
                if(!hasMagnetBoots) {
                    sprite_index = spr_Stand_Right;
                } else {
                    sprite_index = spr_Stand_Right_Mag;
                }
            } else if(sprite_index == spr_Fall_Left ||
                      sprite_index == spr_Jump_Left ||
                      sprite_index == spr_Fall_Left_Mag ||
                      sprite_index == spr_Jump_Left_Mag) {
                if(!hasMagnetBoots) {
                    sprite_index = spr_Stand_Left;
                } else {
                    sprite_index = spr_Stand_Left_Mag;
                }
            } 
        } else {
            // no ground collision, in free fall
            grounded = false;
            
            // change to falling sprite
            if(!climbing &amp;&amp; !magnetized &amp;&amp; airFrames &gt; 0) {
                if(facing == WAY.RIGHT) {
                    if(!hasMagnetBoots) {
                        sprite_index = spr_Fall_Right;
                    } else {
                        sprite_index = spr_Fall_Right_Mag;
                    }
                } else {
                    if(!hasMagnetBoots) {
                        sprite_index = spr_Fall_Left;
                    } else {
                        sprite_index = spr_Fall_Left_Mag;
                    }
                }
            } 
        }
        
        if (ladderBlockBelow != noone &amp;&amp; restOfBody == noone) {
            ladderBelow = true;
        } else {
            ladderBelow = false;
        }
    }
    
    // Gravity
    if (!grounded &amp;&amp; !climbing &amp;&amp; !magnetized) {
        vspeed += global.gravFactor;
        if (vspeed &gt; global.maxFallSpeed) {
            vspeed = global.maxFallSpeed;
        }
    } else {
        vspeed = 0;
    }
    
    // determine if the player is on a magnet block
    magnetBlock = checkCollisionDir(currentDir, WAY.BELOW, obj_Magnet);
    magnetized = magnetBlock != noone &amp;&amp; hasMagnetBoots;
    
    // count number of frames since touching the ground
    if(grounded) {
        airFrames = 0;
    } else {
        airFrames++;
    }
    
    // count how many frames have passed since the player was magnetized
    if(magnetized) {
        demagedFrames = 0;
        airFrames = 0;
    } else {
        demagedFrames++;
    }
    
    // instant flip to NORTH when falling off ceilings, etc.
    if(!magnetized &amp;&amp; currentDir != DIR.NORTH &amp;&amp; demagedFrames &gt; 2) {
        image_angle = 0;
        view_angle = 0;
        currentDir = DIR.NORTH;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// parallax
background_x[0] = view_xview[0] * 0.6 + bg_offsetX;

// get percentage of the room the view is vertically
if(room_height != view_hview[0]) {
    yPercentage = view_yview[0] / (room_height - view_hview[0]);
    background_y[0] = view_yview[0] + background_height[0] * 0.25 - yPercentage * (view_hview[0] - background_height[0]) / 2;
}
    
// currently only have sprite for facing right... future TODO?
if(alarm[0] &gt; room_speed * 1.5) {
    sprite_index = spr_Item_Get;
} else if (alarm[0] &gt; 0) {
    sprite_index = spr_Item_Get_Mag;
}
    
// item get
if(itemGet != noone &amp;&amp; !itemGet.pickedUp &amp;&amp; grounded) {
    alarm[0] = room_speed * 3;
    controlsEnabled = false;
    itemGet.pickedUp = true;
    
    // reposition the item to be above the player's head
    itemGet.x = x;
    itemGet.y = y - sprite_height / 2 - 1;
}

//audio 
audio_listener_position(x, y, 0);





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not(dying) {
    // Handle transitioning on inner right angles (eg. floor to wall, wall to ceiling)
    if(degreesToRotateInner != 0) {
        if(degreesToRotateInner &gt; 0) {
            // rotate CCW
            image_angle += deltaDegrees;
            view_angle -= deltaDegrees;
            degreesToRotateInner -= deltaDegrees;
            // move the player slightly each frame to prevent them from ending
            // up in a magnet block after the rotation is complete
            switch(currentDir) {
            case DIR.NORTH:
                x -= 16/45;
                y += 16/45;
                break;
            case DIR.WEST:
                x += 16/45;
                y += 16/45;
                break;
            case DIR.SOUTH:
                x += 16/45;
                y -= 16/45;
                break;
            case DIR.EAST:
                x -= 16/45;
                y -= 16/45;
                break;
            }
        } else {
            // rotate CW
            image_angle -= deltaDegrees;
            view_angle += deltaDegrees;
            degreesToRotateInner += deltaDegrees;
            switch(currentDir) {
            case DIR.NORTH:
                x += 16/45;
                y += 16/45;
                break;
            case DIR.WEST:
                x += 16/45;
                y -= 16/45;
                break;
            case DIR.SOUTH:
                x -= 16/45;
                y -= 16/45;
                break;
            case DIR.EAST:
                x -= 16/45;
                y += 16/45;
                break;
            }
        }
    } else if(degreesToRotateOuter != 0) {
        // do outer corner transition
        if(degreesToRotateOuter &gt; 0) {
            // rotate CCW
            image_angle += deltaDegrees;
            view_angle -= deltaDegrees;
            degreesToRotateOuter -= deltaDegrees;
            // move the player slightly each frame to prevent them from ending
            // up in a magnet block after the rotation is complete
            switch(currentDir) {
            case DIR.NORTH:
                x -= 16/45;
                y += 48/45;
                break;
            case DIR.WEST:
                x += 48/45;
                y += 16/45;
                break;
            case DIR.SOUTH:
                x += 16/45;
                y -= 48/45;
                break;
            case DIR.EAST:
                x -= 48/45;
                y -= 16/45;
                break;
            }
        } else {
            // rotate CW
            image_angle -= deltaDegrees;
            view_angle += deltaDegrees;
            degreesToRotateOuter += deltaDegrees;
            switch(currentDir) {
            case DIR.NORTH:
                x += 16/45;
                y += 48/45;
                break;
            case DIR.WEST:
                x += 48/45;
                y -= 16/45;
                break;
            case DIR.SOUTH:
                x -= 16/45;
                y -= 48/45;
                break;
            case DIR.EAST:
                x -= 48/45;
                y += 16/45;
                break;
            }
        }
    } else if(!controlsEnabled &amp;&amp; itemGet == noone &amp;&amp; !global.dialogueOpen) {
        // the rotation has completed
        controlsEnabled = true;
        magnetized = true;
        
        // return to standing sprite
        if (facing == WAY.RIGHT)// (sprite_index == spr_Run_Right_Mag)
        {
            sprite_index = spr_Stand_Right_Mag;
        }
        else
        {
            sprite_index = spr_Stand_Left_Mag;
        }
        
        // image angle should be from 0-359
        while(image_angle &lt; 0) {
            image_angle += 360;
        }
        while(image_angle &gt;= 360) {
            image_angle -= 360;
        }
        // set the new direction based on the image rotation
        switch(image_angle) {
        case 0:
            currentDir = DIR.NORTH;
            break;
        case 90:
            currentDir = DIR.WEST;
            break;
        case 180:
            currentDir = DIR.SOUTH;
            break;
        case 270:
            currentDir = DIR.EAST;
            break;
        }
    }
    if (global.dialogueOpen) {
        controlsEnabled = false;
    }
} else {
    // dying
    image_speed = 0;
    controlsEnabled = false;
    hspeed = max(0, hspeed-1);
    vspeed = max(0, vspeed-1);
    image_alpha -= 0.01;
    if (image_alpha &lt;= 0) {
        //reset player state
        vspeed = 0;
        grounded = false;
        jumping = false;
        climbing = false;
        touchingLadder = false;
        movingUpLadder = false;
        ladderBelow = false;
        magnetized = false;
        dying = false;
        if(facing == WAY.RIGHT) {
            sprite_index = spr_Stand_Right;
        } else {
            sprite_index = spr_Stand_Left;
        }
        image_alpha = 1;
        controlsEnabled = true;
        global.dialogueOpen = false;
        room_restart();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (camera_detached) {
    view_visible[0] = true;
    view_visible[1] = false;
    
    camera_detached = false;
}

if(controlsEnabled) {
    // Check if colliding with a ladder
    if (touchingLadder) {
        climbing = true;
        if(!hasMagnetBoots) {
            sprite_index = spr_Climb;
        } else {
            sprite_index = spr_Climb_Mag;
        }
        image_speed = climb_frame_rate;
        y -= 2;
        vspeed = 0;
        x = ladderBlock.x + (sprite_width / 2);
        movingUpLadder = true;
    } else if(grounded &amp;&amp; !keyboard_check(ord('A')) &amp;&amp; !keyboard_check(ord('D'))){
        // stand on the top of a ladder
        if(facing = WAY.RIGHT) {
            if(!hasMagnetBoots) {
                sprite_index = spr_Stand_Right;
            } else {
                sprite_index = spr_Stand_Right_Mag;
            }
        } else {
            if(!hasMagnetBoots) {
                sprite_index = spr_Stand_Left;
            } else {
                sprite_index = spr_Stand_Left_Mag;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (camera_detached &amp;&amp; (touchingLadder || ladderBelow)) {
    view_visible[0] = true;
    view_visible[1] = false;
    
    camera_detached = false;
}

if(controlsEnabled) {
    // Check if colliding with a ladder
    if (touchingLadder || ladderBelow) {
        if(!hasMagnetBoots) {
            sprite_index = spr_Climb;
        } else {
            sprite_index = spr_Climb_Mag;
        }
        image_speed = climb_frame_rate;
        climbing = true;
        y += 2;
        vspeed = 0;
        if (touchingLadder) {
            x = ladderBlock.x + (sprite_width / 2);
        } else if (ladderBelow) {
            x = ladderBlockBelow.x + (sprite_width / 2);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (camera_detached) {
    view_visible[0] = true;
    view_visible[1] = false;
    
    camera_detached = false;
}

if(controlsEnabled) {
    // stop off-wall jump momentum if the player wants to control themselves
    hspeed = 0;
    
    // inner corner
    magnet = checkCollisionDir(currentDir, WAY.RIGHT, obj_Magnet);
    magFloor = checkCollisionDir(currentDir, WAY.BELOW, obj_Magnet);
    
    // outer corner
    floorFloor = checkCollisionDir(currentDir, WAY.BELOW, obj_Floor);
    magPrev = checkCollisionDir(currentDir, WAY.BELOW, obj_Magnet, -3, 0);
    magLeft = checkCollisionDir(currentDir, WAY.LEFT, obj_Magnet);
    
    if(hasMagnetBoots &amp;&amp; magnet &amp;&amp; magFloor &amp;&amp; magnet != magFloor) {
        // transition onto the magnet block wall on the right
        // position the player right next to the block to transition to
        vspeed = 0;
        switch(currentDir) {
        case DIR.NORTH:
            x = magnet.x - sprite_width / 2;
            break;
        case DIR.SOUTH:
            x = magnet.x + 3 * sprite_width / 2;
            break;
        case DIR.EAST:
            y = magnet.y - sprite_width / 2;
            break;
        case DIR.WEST:
            y = magnet.y + 3 * sprite_width / 2;
            break;
        }
        // rotate the player
        controlsEnabled = false;
        degreesToRotateInner += 90;
        sprite_index = spr_Run_Right_Mag;
    } else if(hasMagnetBoots &amp;&amp; magFloor == noone &amp;&amp; floorFloor == noone &amp;&amp; magLeft == noone &amp;&amp; magPrev != noone) {
        // transition onto the right side of the magnet block just walked over
        // position next to the magnet wall
        vspeed = 0;
        switch(currentDir) {
        case DIR.NORTH:
            x = magPrev.x + 3 * sprite_width / 2;
            break;
        case DIR.SOUTH:
            x = magPrev.x - sprite_width / 2;
            break;
        case DIR.EAST:
            y = magPrev.y + 3 * sprite_width / 2;
            break;
        case DIR.WEST:
            y = magPrev.y - sprite_width / 2;
            break;
        }
        controlsEnabled = false;
        degreesToRotateOuter -= 90;
        sprite_index = spr_Run_Right_Mag;
    } else {
        // regular movement
        if(grounded || magnetized) {
            if(!hasMagnetBoots) {
                sprite_index = spr_Run_Right;
            } else {
                sprite_index = spr_Run_Right_Mag;
            }
            image_speed = run_frame_rate;
        } else if(!climbing) {
            if(!hasMagnetBoots) {
                sprite_index = spr_Jump_Right;
            } else {
                sprite_index = spr_Jump_Right_Mag;
            }
        }
        facing = WAY.RIGHT;
        switch(currentDir) {
        case DIR.NORTH:
            x += moveSpeed;
            break;
        case DIR.SOUTH:
            x -= moveSpeed;
            break;
        case DIR.EAST:
            y += moveSpeed;
            break;
        case DIR.WEST:
            y -= moveSpeed;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (camera_detached) {
    view_visible[0] = true;
    view_visible[1] = false;
    
    camera_detached = false;
}

if(controlsEnabled) {
    // stop off-wall jump momentum if the player wants to control themselves
    hspeed = 0;
    
    // inner corner
    magnet = checkCollisionDir(currentDir, WAY.LEFT, obj_Magnet);
    magFloor = checkCollisionDir(currentDir, WAY.BELOW, obj_Magnet);
    
    // outer corner
    floorFloor = checkCollisionDir(currentDir, WAY.BELOW, obj_Floor);
    magPrev = checkCollisionDir(currentDir, WAY.BELOW, obj_Magnet, 3, 0);
    magLeft = checkCollisionDir(currentDir, WAY.RIGHT, obj_Magnet);
    
    if(hasMagnetBoots &amp;&amp; magnet &amp;&amp; magFloor &amp;&amp; magnet != magFloor) {
        // transition onto the magnet block wall on the right
        // position the player right next to the block to transition to
        vspeed = 0;
        switch(currentDir) {
        case DIR.NORTH:
            x = magnet.x + 3 * sprite_width / 2;
            break;
        case DIR.SOUTH:
            x = magnet.x - sprite_width / 2;
            break;
        case DIR.EAST:
            y = magnet.y + 3 * sprite_width / 2;
            break;
        case DIR.WEST:
            y = magnet.y - sprite_width / 2;
            break;
        }
        // rotate the player
        controlsEnabled = false;
        degreesToRotateInner -= 90;
        
        sprite_index = spr_Run_Left_Mag;
    } else if(hasMagnetBoots &amp;&amp; magFloor == noone &amp;&amp; floorFloor == noone &amp;&amp; magLeft == noone &amp;&amp; magPrev != noone) {
        // transition onto the right side of the magnet block just walked over
        // pre-position
        vspeed = 0;
        switch(currentDir) {
        case DIR.NORTH:
            x = magPrev.x - sprite_width / 2;
            break;
        case DIR.SOUTH:
            x = magPrev.x + 3 * sprite_width / 2;
            break;
        case DIR.EAST:
            y = magPrev.y - sprite_width / 2;
            break;
        case DIR.WEST:
            y = magPrev.y + 3 * sprite_width / 2;
            break;
        }
        controlsEnabled = false;
        degreesToRotateOuter += 90;
        sprite_index = spr_Run_Left_Mag;
    } else {
        // normal movement
        if(grounded || magnetized) {
            if(!hasMagnetBoots) {
                sprite_index = spr_Run_Left;
            } else {
                sprite_index = spr_Run_Left_Mag;
            }
            image_speed = run_frame_rate;
        } else if(!climbing) {
            if(!hasMagnetBoots) {
                sprite_index = spr_Jump_Left;
            } else {
                sprite_index = spr_Jump_Left_Mag;
            }
        }
        facing = WAY.LEFT;
        
        switch(currentDir) {
        case DIR.NORTH:
            x -= moveSpeed;
            break;
        case DIR.SOUTH:
            x += moveSpeed;
            break;
        case DIR.EAST:
            y -= moveSpeed;
            break;
        case DIR.WEST:
            y += moveSpeed;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the camera isn't already detached, use the location of the other view
if (!camera_detached &amp;&amp;  (grounded || magnetized || touchingLadder)) {
    view_visible[0] = false;
    view_visible[1] = true;

    view_xview[1] = view_xview[0];
    view_yview[1] = view_yview[0];
    
    camera_detached = true;
}

if ((view_yview[1] + global.cameraAmount) &lt; (room_height - view_hview[1])) {
    view_yview[1] = view_yview[1] + global.cameraAmount;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the camera isn't already detached, use the location of the other view
if (!camera_detached &amp;&amp;  (grounded || magnetized || touchingLadder)) {
    view_visible[0] = false;
    view_visible[1] = true;

    view_xview[1] = view_xview[0];
    view_yview[1] = view_yview[0];
    
    camera_detached = true;
}

if (view_xview[1] + global.cameraAmount &lt; room_width - view_wview[1]) {
    view_xview[1] = view_xview[1] + global.cameraAmount;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the camera isn't already detached, use the location of the other view
if (!camera_detached &amp;&amp;  (grounded || magnetized || touchingLadder)) {
    view_visible[0] = false;
    view_visible[1] = true;

    view_xview[1] = view_xview[0];
    view_yview[1] = view_yview[0];
    
    camera_detached = true;
}

if (view_yview[1] - global.cameraAmount &gt; 0) {
    view_yview[1] = view_yview[1] - global.cameraAmount;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the camera isn't already detached, use the location of the other view
if (!camera_detached &amp;&amp; (grounded || magnetized || touchingLadder)) {
    view_visible[0] = false;
    view_visible[1] = true;

    view_xview[1] = view_xview[0];
    view_yview[1] = view_yview[0];
    
    camera_detached = true;
}

if (view_xview[1] - global.cameraAmount &gt; 0) {
    view_xview[1] = view_xview[1] - global.cameraAmount;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (camera_detached) {
    view_visible[0] = true;
    view_visible[1] = false;
    
    camera_detached = false;
}

if(controlsEnabled) {
    if(magnetized) {
        // detach from the wall
        magnetized = false;
        switch(currentDir) {
            case DIR.NORTH:
                vspeed -= jumpPower;

                // jumping sprite
                if(facing == WAY.RIGHT) {
                    if(!hasMagnetBoots) {
                        sprite_index = spr_Jump_Right;
                    } else {
                        sprite_index = spr_Jump_Right_Mag;
                    }
                } else {
                    if(!hasMagnetBoots) {
                        sprite_index = spr_Jump_Left;
                    } else {
                        sprite_index = spr_Jump_Left_Mag;
                    }
                }
                break;
            case DIR.EAST:
                hspeed += jumpPower / 2;
                x += 1;
                facing = WAY.RIGHT;
                if(!hasMagnetBoots) {
                    sprite_index = spr_Fall_Right;
                } else {
                    sprite_index = spr_Fall_Right_Mag;
                }
                break;
            case DIR.SOUTH:
                vspeed += jumpPower / 2;
                if(facing == WAY.RIGHT) {
                    if(!hasMagnetBoots) {
                        sprite_index = spr_Fall_Left;
                    } else {
                        sprite_index = spr_Fall_Left_Mag;
                    }
                } else {
                    if(!hasMagnetBoots) {
                        sprite_index = spr_Fall_Right;
                    } else {
                        sprite_index = spr_Fall_Right_Mag;
                    }
                }
                break;
            case DIR.WEST:
                hspeed -= jumpPower / 2;
                x -= 1;
                facing = WAY.LEFT;
                if(!hasMagnetBoots) {
                    sprite_index = spr_Fall_Left;
                } else {
                    sprite_index = spr_Fall_Left_Mag;
                }
                break;    
        }

        grounded = false;
        jumping = true;  
    } else if (grounded &amp;&amp; !climbing &amp;&amp; !magnetized) {
        vspeed -= jumpPower;
        
        // set the jumping sprite
        if(facing == WAY.RIGHT) {
            if(!hasMagnetBoots) {
                sprite_index = spr_Jump_Right;
            } else {
                sprite_index = spr_Jump_Right_Mag;
            }
        } else {
            if(!hasMagnetBoots) {
                sprite_index = spr_Jump_Left;
            } else {
                sprite_index = spr_Jump_Right_Mag;
            }
        }
        grounded = false;
        jumping = true;
        ladderBelow = false;
    }
    
    if (climbing) {
        climbing = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (door_id != 0) {
    x = (door_id).x + (sprite_width / 2);
    y = (door_id).y + (sprite_height / 2);
}

// Set view
camera_detached = false;
view_visible[0] = true;
view_visible[1] = false;

bg_offsetX = background_x[0];
bg_offsetY = background_y[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.dev</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>255</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>514</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_text</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>Win width</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>window_get_width()</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>100</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>514</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_text</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>Win height</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>25</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>window_get_height()</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>100</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>25</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>514</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_text</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>MouseX:</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>40</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>mouse_x</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>100</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>40</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>514</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_text</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>MouseY:</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>55</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>mouse_y</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>100</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>55</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// debug disable controls toggle
if(global.dev) {
    if(controlsEnabled) {
        controlsEnabled = false;
    } else {
        controlsEnabled = true;
    }
    
    if(global.dialogueOpen) {
        enable_controls();
    } else {
        disable_controls();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// debug slowdown toggle
if(global.dev) {
    if(room_speed == 60) {
        room_speed = 5;
    } else {
        room_speed = 60;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//toggle mag boots
if(global.dev) {
    hasMagnetBoots = !hasMagnetBoots
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    movingUpLadder = false;
    // stop animating on ladders when not moving
    if(!keyboard_check(ord('S'))) {
        image_speed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    // stop animating on ladders when not moving
    if(!keyboard_check(ord('S'))) {
        image_speed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// return to standing
if(!keyboard_check(ord('A')) &amp;&amp; controlsEnabled &amp;&amp; (grounded || magnetized)) {
    if(!hasMagnetBoots) {
        sprite_index = spr_Stand_Right;
    } else {
        sprite_index = spr_Stand_Right_Mag;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// return to standing
if(!keyboard_check(ord('D')) &amp;&amp; controlsEnabled &amp;&amp; (grounded || magnetized)) {
    if(!hasMagnetBoots) {
        sprite_index = spr_Stand_Left;
    } else {
        sprite_index = spr_Stand_Left_Mag;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="34">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.dev) {
    advanceLevel();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="33">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.dev) {
    if (level &gt; 0) {
        level -= 2;
        if (level &lt; 0) {
            level = 0;
        }
        advanceLevel();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
