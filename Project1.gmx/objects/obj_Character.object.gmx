<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Character</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlsEnabled = true;

// which way her head is pointing
enum DIR {
    NORTH,
    SOUTH,
    EAST,
    WEST
}

// state of the player's position/physics
vspeed = 0;
grounded = false;
jumping = false;
climbing = false;
touchingLadder = false;
movingUpLadder = false;
magnetized = false;

currentDir = DIR.NORTH;

// wall transitions
degreesToRotate = 0;
deltaDegrees = 2;

// abilities
hasMagnetBoots = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// === COLLISION ===
// Check if colliding with a ladder
ladderBlock = collision_rectangle(bbox_left + 12, bbox_top, bbox_right - 12, bbox_bottom, obj_Ladder, false, true);
if (ladderBlock != noone) {
    touchingLadder = true;
} else {
    touchingLadder = false;
    movingUpLadder = false;
    climbing = false;
}

// Check the left side
leftBlock = collision_rectangle(bbox_left - 4, bbox_top, bbox_left - 1, bbox_bottom, obj_Floor, false, true);
if (leftBlock != noone) {
    // Move immidately to the right of the block
    hspeed = 0;
    x = leftBlock.x + leftBlock.sprite_width + (sprite_width / 2);
}

// Check the right side
rightBlock = collision_rectangle(bbox_right + 1, bbox_top, bbox_right + 4, bbox_bottom, obj_Floor, false, true);
if (rightBlock != noone) {
    // Move immidately to the left of the block
    hspeed = 0;
    x = rightBlock.x - (sprite_width / 2);
}

// Check the top
topBlock = collision_rectangle(bbox_left + 1, bbox_top - 2, bbox_right - 1, bbox_top - 1, obj_Floor, false, true);
if (topBlock != noone) {
    // only stop vertical upward movement
    if(vspeed &lt; 0) {
        vspeed = 0;
        y = topBlock.y + topBlock.sprite_height + (sprite_height / 2);
    }
}

// If we are not moving upward, check the bottom for a block
if (vspeed &gt;= 0) {
    floorBlock = collision_rectangle(bbox_left + 1, bbox_bottom, bbox_right - 1, bbox_bottom + 5, obj_Floor, false, true);
    if(floorBlock != noone &amp;&amp; !movingUpLadder) {
        // Move onto the floor and stop gravity
        vspeed = 0;
        y = floorBlock.y - (sprite_height / 2);
        grounded = true;
        climbing = false;
    } else {
        grounded = false;
    }
}

// Gravity
if (!grounded &amp;&amp; !climbing) {
    vspeed += global.gravFactor;
    if (vspeed &gt; global.maxFallSpeed) {
        vspeed = global.maxFallSpeed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Handle transitioning
if(degreesToRotate != 0) {
    if(degreesToRotate &gt; 0) {
        image_angle += deltaDegrees;
        view_angle -= deltaDegrees;
        degreesToRotate -= deltaDegrees;
        x -= .8;
    } else {
        image_angle -= deltaDegrees;
        view_angle += deltaDegrees;
        degreesToRotate += deltaDegrees;
        x += .8;
    }
} else if(!controlsEnabled) {
    controlsEnabled = true;
    
    // image angle should be from 0-359
    while(image_angle &lt; 0) {
        image_angle += 360;
    }
    while(image_angle &gt;= 360) {
        image_angle -= 360;
    }
    // set the direction based on the image rotation
    switch(image_angle) {
    case 0:
        currentDir = DIR.NORTH;
        break;
    case 90:
        currentDir = DIR.WEST;
        break;
    case 180:
        currentDir = DIR.SOUTH;
        break;
    case 270:
        currentDir = DIR.EAST;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    // Check if colliding with a ladder
    if (touchingLadder) {
        climbing = true;
        y -= 2;
        vspeed = 0;
        x = ladderBlock.x + (sprite_width / 2);
        movingUpLadder = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    // Check if colliding with a ladder
    if (touchingLadder) {
        climbing = true;
        y += 2;
        vspeed = 0;
        x = ladderBlock.x + (sprite_width / 2)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    magnet = collision_rectangle(bbox_right + 1, bbox_top - 16, bbox_right + 4, bbox_bottom, obj_Magnet, false, true);
    if(magnet) {
        // transition onto the magnet block wall on the right
        // rotate the player
        controlsEnabled = false;
        degreesToRotate += 90;
        magnetized = true;
    }
    
    
    switch(currentDir) {
    case DIR.NORTH:
        x += 4;
        break;
    case DIR.SOUTH:
        x -= 4;
        break;
    case DIR.EAST:
        y += 4;
        break;
    case DIR.WEST:
        y -= 4;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    magnet = collision_rectangle(bbox_left - 4, bbox_top - 16, bbox_left - 1, bbox_bottom, obj_Magnet, false, true);
    if(magnet) {
        // transition onto the magnet block wall on the right
        // rotate the player
        controlsEnabled = false;
        degreesToRotate -= 90;
        magnetized = true;
    }
    
    
    switch(currentDir) {
    case DIR.NORTH:
        x -= 4;
        break;
    case DIR.SOUTH:
        x += 4;
        break;
    case DIR.EAST:
        y -= 4;
        break;
    case DIR.WEST:
        y += 4;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    if (grounded &amp;&amp; !climbing) {
        vspeed -= 4;
        grounded = false;
        jumping = true;
    }
    
    if (climbing) {
        climbing = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="10" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(controlsEnabled) {
    movingUpLadder = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
